<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and SAP Product Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
			<![CDATA[
I want to aggregate products from Salesforce and SAP and compare them to see which products can only be found in one of the two and which products are in both.

This template generates the result a CSV report that is sent by email to addresses you configure.

This template extracts data from two systems, aggregates data, compares values of fields for the objects, and generates a CSV report of the differences.

This template gets products from Salesforce and materials from SAP, compares by the name of the products, and generates a CSV file which shows product in Salesforce, product in SAP, and products in Salesforce and SAP. The report is then emailed to a configured group of email addresses.
]]>
		</section>
		<section id="considerations">
			<![CDATA[
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for all to run smoothly.
Failing to do so could lead to unexpected behavior of the template.


## Disclaimer

This template uses a few private Maven dependencies from MuleSoft to work. If you intend to run this template with Maven support, you need to add three dependencies in the pom.xml file that begin with the following group IDs: 
	**com.sap.conn.jco** or **com.sap.conn.idoc** 
]]>
		</section>
		<section id="running_on_studio">
<![CDATA[
To make this template run in Studio, there are a few extra steps that needs to be made.
Search for "Enabling Your Studio Project for SAP" at `https://docs.mulesoft.com` for more information.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
After you have your app running, if you chose `template-sfdc2sap-product-aggregation` as the domain name to trigger the use case, browse to `http://template-sfdc2sap-product-aggregation.cloudhub.io/generatereport`, and report gets sent to the configured emails.
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case, browse to the local HTTP endpoint with the port you configured in your file. For example if you use `9090` for the port, browse to `http://localhost:9090/generatereport` and the application creates a CSV report and sends it to the configured emails.
]]>
		</section>
		<section id="application_configuration">
			<![CDATA[
### HTTP Connector Configuration

+ http.port `9090` 
 
### Salesforce Connector Configuration

+ sfdc.username `bob.dylan@sfdc`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

### SAP Connector Configuration

+ sap.jco.ashost `your.sap.address.com`
+ sap.jco.user `SAP_USER`
+ sap.jco.passwd `SAP_PASS`
+ sap.jco.sysnr `14`
+ sap.jco.client `800`
+ sap.jco.lang `EN`

+ sap.maxrows `100`

### SMTP Services Configuration

+ smtp.host `smtp.example.com`
+ smtp.port `587`
+ smtp.user `exampleuser@example.com`
+ smtp.password `ExamplePassword456`

### Email Details

+ mail.from `exampleuser@example.com`
+ mail.to `woody.guthrie@example.com`
+ mail.subject `SFDC Products report`
+ mail.body `Report comparing products from Salesforce and SAP Materials`
+ attachment.name `Productsreport.csv`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API calls that can be made. However, this template
only makes one API call to Salesforce during aggregation.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you find the endpoint to start the aggregation. This template uses an HTTP Listener to trigger the use case.

$H$H# Trigger Flow
**HTTP Listener** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change as you prefer.
+ The host name for all endpoints in your CloudHub configuration is `localhost`. CloudHub then routes requests from your application domain URL to the endpoint.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
The functional aspect of the template is implemented in this XML, directed by one flow responsible for conducting the aggregation of data, comparing records, and finally formatting the output as a CSV report.
Using the Scatter-Gather component, this template queries the data in different systems. After that the aggregation is implemented in a DataWeave 2 script using the Transform component.

Aggregated results are sorted by:

1. Products only in Salesforce.
2. Products (Materials) only in SAP.
3. Products (Materials) in both Salesforce and SAP.

The result is transformed to CSV format. The final report in CSV format is sent to the email addresses  you configured in the `mule.*.properties` file.
]]>
		</section>
	</sections>
</configuration>
